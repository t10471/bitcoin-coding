package main

const tpl = `
{{- $gStructureInfo := .StructureInfo }}
{{- $gTypeName := $gStructureInfo.TypeName }}
{{- $r := $gStructureInfo.ReceiverChar }}

// Code generated by "cofing -t {{ $gTypeName }}"; DO NOT EDIT.
package {{ .PackageName }}

import (
	"bytes"

	"github.com/t10471/bitcoin-coding/basetype"
)

func ({{ $r }} *{{ $gTypeName }}) Decode(b_ *bytes.Buffer) error {
	{{- range $gStructureInfo.FieldInfoList }}
	// {{ .FieldName }}
	{{- if eq .FieldType.String "FieldTypeSlice" }}
	{
		m_ := int({{ $r }}.{{ .SliceCountName }})
		{{ $r }}.{{ .FieldName }} = make({{ .TypeName }}, m_)
		for i_ := 0; i_ < m_; i_++{
			if err := {{ $r }}.{{ .FieldName }}[i_].Decode(b_); err != nil {
				return err
			}
		}
	}
	{{- else if eq .FieldType.String "FieldTypeStructure" }}
	if err := {{ $r }}.{{ .FieldName }}.Decode(b_); err != nil {
		return err
	}
	{{- else if eq .FieldType.String "FieldTypeBaseType" }}
	{
		var err error
		{{ $r }}.{{ .FieldName }}, err = basetype.Decode{{ .BaseTypeName }}(b_)
		if err != nil {
			return err
		}
	}
	{{- end }} {{/* .if */}}
	{{- end }} {{/* .FieldInfoList */}}
	return nil
}

func ({{ $r }} *{{ $gTypeName }}) Encode(b_ *bytes.Buffer) error {
	{{- range $gStructureInfo.FieldInfoList }}
	// {{ .FieldName }}
	{{- if eq .FieldType.String "FieldTypeSlice" }}
	{
		m_ := int({{ $r }}.{{ .SliceCountName }})
		for i_ := 0; i_ < m_; i_++ {
			if err := {{ $r }}.{{ .FieldName }}[i_].Encode(b_); err != nil {
				return err
			}
		}
	}
	{{- else if eq .FieldType.String "FieldTypeStructure" }}
	if err := {{ $r }}.{{ .FieldName }}.Encode(b_); err != nil {
		return err
	}
	{{- else if eq .FieldType.String "FieldTypeBaseType" }}
	if err := basetype.Encode{{ .BaseTypeName }}(b_, {{ $r }}.{{ .FieldName }}); err != nil {
		return err
	}
	{{- end }} {{/* .if */}}
	{{- end }} {{/* .FieldInfoList */}}
	return nil
}
`
